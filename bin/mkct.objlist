#!/usr/bin/bash

set -u

NAME=list
OBJECT_TYPE=int
H_FILE=
C_FILE=
OUTPUT_TYPE='overview'

function print() {
  echo "$1" >&2
}

function print_usage() {
  print "Usage: mkct.list [OPTIONS]...                                        "
  print "Generate a circular, linked list implementation with the given type  "
  print "                                                                     "
  print "  --name=[NAME]            Set list name/prefix                      "
  print "  --object-type=[TYPE]     Set type of objects contained in the list "
  print "                                                                     "
  print "  --header-file=[FILENAME] Set header file to [FILENAME]             "
  print "                             Defaults to [NAME].h                    "
  print "  --source-file=[FILENAME] Set source file to [FILENAME]             "
  print "                             Defaults to [NAME].c                    "
  print "                                                                     "
  print "  --overview               Output API/Overview   (default)           "
  print "  --header                 Output C header file                      "
  print "  --source                 Output C source file                      "
  print "                                                                     "
  print "  -h,--help                Show this usage and exit                  "
  print "                                                                     "
}

function fail() {
  print "error: $1"
  print ""
  exit 1
}

function fail_badusage() {
  print "error: $1"
  print ""
  print_usage
  exit 1
}

while [ "$#" -gt 0 ]; do
  case "$1" in
    --name=*)       NAME="${1#*=}";       shift 1 ;;
    --object-type=*) OBJECT_TYPE="${1#*=}"; shift 1 ;;

    --header-file=*) H_FILE="${1#*=}"; shift 1 ;;
    --source-file=*) C_FILE="${1#*=}"; shift 1 ;;

    --name|--object-type|--header-file|--source-file)
      fail_badusage "$1 requires an argument" ;;

    --overview) OUTPUT_TYPE='overview'; shift 1 ;;
    --header)   OUTPUT_TYPE='header';   shift 1 ;;
    --source)   OUTPUT_TYPE='source';   shift 1 ;;

    -h|--help) print_usage; exit 0 ;;

    -*) fail_badusage "unknown option: $1" ;;
    *)  fail_badusage "unknown option: $1" ;;
  esac
done

if [ -z $H_FILE ]; then H_FILE="$NAME.h"; fi
if [ -z $C_FILE ]; then C_FILE="$NAME.c"; fi

case "$OUTPUT_TYPE" in
  overview)
read -r -d '' OUTPUT << "EOF"

Files:
  H_FILE
  C_FILE

Description:
  Implements the following circular linked list structure:
 
         list         node         node         node
      +--------+   +--------+   +--------+   +--------+
   +->|  list  |<->|  list  |<->|  list  |<->|  list  |<-+
   |  +--------+   + - -- - +   + - -- - +   + - -- - +  |
   |               | object |   | object |   | object |  |
   |               +--------+   +--------+   +--------+  |
   +-----------------------------------------------------+

  Objects are allocated and initialized when nodes are pushed. Objects are
  cleared and freed when nodes are erased. Pointers to objects created will
  remain valid until their nodes are erased.

  Stubs for initializing and clearing objects can be found in the generated
  source. More detailed documentation can be found in the generated header.

Types:
  List object : OBJLIST_TYPE
  Node object : NODE_TYPE
  Object type : OBJECT_TYPE *

API:
  Initialize a list object   : OBJLIST_METHOD_INIT         (OBJLIST_TYPE * list)
  Erase all nodes            : OBJLIST_METHOD_CLEAR        (OBJLIST_TYPE * list)
  Erase a node from its list : OBJLIST_METHOD_ERASE        (NODE_TYPE * node)
  Append to a list           : OBJLIST_METHOD_PUSHBACK     (OBJLIST_TYPE * list) -> NODE_TYPE *
  Prepend to a list          : OBJLIST_METHOD_PUSHFRONT    (OBJLIST_TYPE * list) -> NODE_TYPE *
  Insert before a node       : OBJLIST_METHOD_INSERTBEFORE (NODE_TYPE * node) -> NODE_TYPE *
  Insert after a node        : OBJLIST_METHOD_INSERTAFTER  (NODE_TYPE * node) -> NODE_TYPE *
  Retrieve the first node    : OBJLIST_METHOD_FIRST        (const OBJLIST_TYPE * list) -> NODE_TYPE *
  Retrieve the last node     : OBJLIST_METHOD_LAST         (const OBJLIST_TYPE * list) -> NODE_TYPE *
  Retrieve the next node     : OBJLIST_METHOD_NEXT         (const NODE_TYPE * node) -> NODE_TYPE *
  Retrieve the previous node : OBJLIST_METHOD_PREV         (const NODE_TYPE * node) -> NODE_TYPE *
  Retrieve a node's object   : OBJLIST_METHOD_VALUE        (const NODE_TYPE * node) -> OBJECT_TYPE *


EOF
    ;;
  header)
read -r -d '' OUTPUT << "EOF"
#ifndef INCLUDE_GUARD
#define INCLUDE_GUARD

/*
 * H_FILE / C_FILE
 *
 * Implements the following circular linked list structure:
 *
 *        list        node        node        node
 *     +--------+  +--------+  +--------+  +--------+
 *  +->|  list  |->|  list  |->|  list  |->|  list  |--+
 *  |  +--------+  + - -- - +  + - -- - +  + - -- - +  |
 *  |              | object |  | object |  | object |  |
 *  |              +--------+  +--------+  +--------+  |
 *  +--------------------------------------------------+
 *
 */

typedef struct OBJLIST_STRUCT {
  struct OBJLIST_STRUCT * next;
  struct OBJLIST_STRUCT * prev;
  struct OBJLIST_STRUCT * head;
} OBJLIST_TYPE;

typedef struct NODE_STRUCT {
  OBJLIST_TYPE list;
  OBJECT_TYPE value;
} NODE_TYPE;

/*
 * Initializes the given list to a valid state.
 */
void OBJLIST_METHOD_INIT(OBJLIST_TYPE * list);

/*
 * Deletes and removes all values present in the list.
 */
void OBJLIST_METHOD_CLEAR(OBJLIST_TYPE * list);

/*
 * Deletes a single node and removes it from its list.
 */
void OBJLIST_METHOD_ERASE(NODE_TYPE * node);

/*
 * Creates a new object and places it at the back of `list`.
 *
 * Returns the new node.
 */
NODE_TYPE * OBJLIST_METHOD_PUSHBACK(OBJLIST_TYPE * list);

/*
 * Creates a new object and places it at the front of `list`.
 *
 * Returns the new node.
 */
NODE_TYPE * OBJLIST_METHOD_PUSHFRONT(OBJLIST_TYPE * list);

/*
 * Creates a new object and inserts it before `node`.
 *
 * Returns the new node.
 */
NODE_TYPE * OBJLIST_METHOD_INSERTBEFORE(NODE_TYPE * node);

/*
 * Creates a new object and inserts it after `node`.
 *
 * Returns the new node.
 */
NODE_TYPE * OBJLIST_METHOD_INSERTAFTER(NODE_TYPE * node);

/*
 * Returns the first node in the list. If the list is empty, returns NULL.
 */
NODE_TYPE * OBJLIST_METHOD_FIRST(const OBJLIST_TYPE * list);

/*
 * Returns the last node in the list. If the list is empty, returns NULL.
 */
NODE_TYPE * OBJLIST_METHOD_LAST(const OBJLIST_TYPE * list);

/*
 * Returns the next node in the list after `node`. If `node` is the last node
 * in the list, returns NULL.
 */
NODE_TYPE * OBJLIST_METHOD_NEXT(const NODE_TYPE * node);

/*
 * Returns the previous node in the list after `node`. If `node` is the first
 * node in the list, returns NULL.
 */
NODE_TYPE * OBJLIST_METHOD_PREV(const NODE_TYPE * node);

/*
 * Returns the value of a given node.
 */
#define OBJLIST_METHOD_VALUE(_node_) ((OBJECT_TYPE *)&((const NODE_TYPE *)_node_)->value)

#endif

EOF
    ;;
  source)
read -r -d '' OUTPUT << "EOF"

#include "H_FILE"

#include <stddef.h>
#include <stdlib.h>


/*  ========  object functionaility  ========  */


/* This function is called after an object's memory has been allocated. */
static void object_init(OBJECT_TYPE * obj) {
  memset(obj, 0, sizeof(OBJECT_TYPE));
}

/* This function is called before an object's memory is freed. */
static void object_clear(OBJECT_TYPE * obj) {
}


/*  ========  general functionaility  ========  */


void OBJLIST_METHOD_INIT(OBJLIST_TYPE * l) {
  l->next = l;
  l->prev = l;
  l->head = l;
}

void OBJLIST_METHOD_CLEAR(OBJLIST_TYPE * l) {
  OBJLIST_TYPE * l_iter;
  OBJLIST_TYPE * l_iter_next;
  NODE_TYPE * node;

  l_iter = l->next;

  while(l_iter != l) {
    l_iter_next = l_iter->next;

    /* no offsetof *should* be necessary */
    node = (NODE_TYPE *)l_iter;

    object_clear(&node->value);
    free(node);

    l_iter = l_iter_next;
  }

  OBJLIST_METHOD_INIT(l);
}

void OBJLIST_METHOD_ERASE(NODE_TYPE * node) {
  node->list.prev->next = node->list.next;
  node->list.next->prev = node->list.prev;

  node->list.next = &node->list;
  node->list.prev = &node->list;
  node->list.head = &node->list;

  object_clear(&node->value);
  free(node);
}

NODE_TYPE * OBJLIST_METHOD_PUSHBACK(OBJLIST_TYPE * l) {
  NODE_TYPE * newnode = malloc(sizeof(NODE_TYPE));

  if(newnode) {
    object_init(&newnode->value);

    newnode->list.next       = l;
    newnode->list.prev       = l->prev;
    l->prev                  = &newnode->list;
    newnode->list.prev->next = &newnode->list;
    newnode->list.head       = l->head;
  }

  return newnode;
}

NODE_TYPE * OBJLIST_METHOD_PUSHFRONT(OBJLIST_TYPE * l) {
  NODE_TYPE * newnode = malloc(sizeof(NODE_TYPE));

  if(newnode) {
    object_init(&newnode->value);

    newnode->list.prev       = l;
    newnode->list.next       = l->next;
    l->next                  = &newnode->list;
    newnode->list.next->prev = &newnode->list;
    newnode->list.head       = l->head;
  }

  return newnode;
}

NODE_TYPE * OBJLIST_METHOD_INSERTBEFORE(NODE_TYPE * node) {
  NODE_TYPE * newnode = malloc(sizeof(NODE_TYPE));

  if(newnode) {
    object_init(&newnode->value);

    newnode->list.next       = &node->list;
    newnode->list.prev       = node->list.prev;
       node->list.prev       = &newnode->list;
    newnode->list.prev->next = &newnode->list;
    newnode->list.head       = node->list.head;
  }

  return newnode;
}

NODE_TYPE * OBJLIST_METHOD_INSERTAFTER(NODE_TYPE * node) {
  NODE_TYPE * newnode = malloc(sizeof(NODE_TYPE));

  if(newnode) {
    object_init(&newnode->value);

    newnode->list.prev       = &node->list;
    newnode->list.next       = node->list.next;
       node->list.next       = &newnode->list;
    newnode->list.next->prev = &newnode->list;
    newnode->list.head       = node->list.head;
  }

  return newnode;
}

NODE_TYPE * OBJLIST_METHOD_FIRST(const OBJLIST_TYPE * l) {
  if(l->next == l) { return 0; }
  return (NODE_TYPE *)l->next;
}

NODE_TYPE * OBJLIST_METHOD_LAST(const OBJLIST_TYPE * l) {
  if(l->prev == l) { return 0; }
  return (NODE_TYPE *)l->prev;
}

NODE_TYPE * OBJLIST_METHOD_NEXT(const NODE_TYPE * l) {
  if(l->list.next == l->list.head) { return 0; }
  return (NODE_TYPE *)l->list.next;
}

NODE_TYPE * OBJLIST_METHOD_PREV(const NODE_TYPE * l) {
  if(l->list.prev == l->list.head) { return 0; }
  return (NODE_TYPE *)l->list.prev;
}


EOF
    ;;
  *)
    fail 'bad output type'
    ;;
esac

# Replace non alphanumeric characters with _
INCLUDE_GUARD="_${H_FILE//[^a-zA-Z0-9]/_}_"
INCLUDE_GUARD="${INCLUDE_GUARD^^}"

REPLACE="\
s/INCLUDE_GUARD/${INCLUDE_GUARD}/g;\
s/OBJECT_TYPE/${OBJECT_TYPE}/g;\
s/OBJLIST_STRUCT/${NAME}/g;\
s/OBJLIST_TYPE/${NAME}_t/g;\
s/NODE_STRUCT/${NAME}_node/g;\
s/NODE_TYPE/${NAME}_node_t/g;\
s/OBJLIST_METHOD_INIT/${NAME}_init/g;\
s/OBJLIST_METHOD_CLEAR/${NAME}_clear/g;\
s/OBJLIST_METHOD_ERASE/${NAME}_erase/g;\
s/OBJLIST_METHOD_PUSHBACK/${NAME}_pushback/g;\
s/OBJLIST_METHOD_PUSHFRONT/${NAME}_pushfront/g;\
s/OBJLIST_METHOD_INSERTBEFORE/${NAME}_insertbefore/g;\
s/OBJLIST_METHOD_INSERTAFTER/${NAME}_insertafter/g;\
s/OBJLIST_METHOD_FIRST/${NAME}_first/g;\
s/OBJLIST_METHOD_LAST/${NAME}_last/g;\
s/OBJLIST_METHOD_NEXT/${NAME}_next/g;\
s/OBJLIST_METHOD_PREV/${NAME}_prev/g;\
s/OBJLIST_METHOD_VALUE/${NAME}_value/g;\
s/H_FILE/${H_FILE////\\/}/g;\
s/C_FILE/${C_FILE////\\/}/g"

# Perform substitutions and print
echo "$OUTPUT" | sed "$REPLACE"

