#!/usr/bin/bash

set -u

NAME=list
VALUE_TYPE=int
H_FILE=
C_FILE=
OUTPUT_TYPE='overview'

function print() {
  echo "$1" >&2
}

function print_usage() {
  print "Usage: mkct.list [OPTIONS]...                                        "
  print "Generate a circular, linked list implementation with the given type  "
  print "                                                                     "
  print "  --name=[NAME]            Set list name/prefix                      "
  print "  --value-type=[TYPE]      Set type of values contained in the list  "
  print "                                                                     "
  print "  --header-file=[FILENAME] Set header file to [FILENAME]             "
  print "                             Defaults to [NAME].h                    "
  print "  --source-file=[FILENAME] Set source file to [FILENAME]             "
  print "                             Defaults to [NAME].c                    "
  print "                                                                     "
  print "  --overview               Output API/Overview   (default)           "
  print "  --header                 Output C header file                      "
  print "  --source                 Output C source file                      "
  print "                                                                     "
  print "  -h,--help                Show this usage and exit                  "
  print "                                                                     "
}

function fail() {
  print "error: $1"
  print ""
  exit 1
}

function fail_badusage() {
  print "error: $1"
  print ""
  print_usage
  exit 1
}

while [ "$#" -gt 0 ]; do
  case "$1" in
    --name=*)       NAME="${1#*=}";       shift 1 ;;
    --value-type=*) VALUE_TYPE="${1#*=}"; shift 1 ;;

    --header-file=*) H_FILE="${1#*=}"; shift 1 ;;
    --source-file=*) C_FILE="${1#*=}"; shift 1 ;;

    --name|--value-type|--header-file|--source-file)
      fail_badusage "$1 requires an argument" ;;

    --overview) OUTPUT_TYPE='overview'; shift 1 ;;
    --header)   OUTPUT_TYPE='header';   shift 1 ;;
    --source)   OUTPUT_TYPE='source';   shift 1 ;;

    -h|--help) print_usage; exit 0 ;;

    -*) fail_badusage "unknown option: $1" ;;
    *)  fail_badusage "unknown option: $1" ;;
  esac
done

if [ -z $H_FILE ]; then H_FILE="$NAME.h"; fi
if [ -z $C_FILE ]; then C_FILE="$NAME.c"; fi

case "$OUTPUT_TYPE" in
  overview)
read -r -d '' OUTPUT << "EOF"

EOF
    ;;
  header)
read -r -d '' OUTPUT << "EOF"
#ifndef INCLUDE_GUARD
#define INCLUDE_GUARD

/*
 * H_FILE / C_FILE
 *
 * Implements the following circular linked list structure:
 *
 *       list       node       node       node
 *     +-------+  +-------+  +-------+  +-------+
 *  +->| list  |->| list  |->| list  |->| list  |--+
 *  |  +-------+  + - - - +  + - - - +  + - - - +  |
 *  |             | value |  | value |  | value |  |
 *  |             +-------+  +-------+  +-------+  |
 *  +----------------------------------------------+
 *
 */

typedef struct LIST_STRUCT {
  struct LIST_STRUCT * next;
  struct LIST_STRUCT * prev;
  struct LIST_STRUCT * head;
} LIST_TYPE;

typedef struct NODE_STRUCT {
  LIST_TYPE list;
  VALUE_TYPE value;
} NODE_TYPE;

/*
 * Initializes the given list to a valid state.
 */
void LIST_METHOD_INIT(LIST_TYPE * list);

/*
 * Deletes and removes all values present in the list.
 */
void LIST_METHOD_CLEAR(LIST_TYPE * list);

/*
 * Deletes a single node and removes it from its list.
 */
void LIST_METHOD_ERASE(NODE_TYPE * node);

/*
 * Creates a new node with value `value` and inserts it at the back of `list`.
 *
 * Returns the new node.
 */
NODE_TYPE * LIST_METHOD_PUSHBACK(LIST_TYPE * list, VALUE_TYPE value);

/*
 * Creates a new node with value `value` and inserts it at the front of `list`.
 *
 * Returns the new node.
 */
NODE_TYPE * LIST_METHOD_PUSHFRONT(LIST_TYPE * list, VALUE_TYPE value);

/*
 * Creates a new node with value `value` and inserts it before `node`.
 *
 * Returns the new node.
 */
NODE_TYPE * LIST_METHOD_INSERTBEFORE(NODE_TYPE * node, VALUE_TYPE value);

/*
 * Creates a new node with value `value` and inserts it after `node`.
 *
 * Returns the new node.
 */
NODE_TYPE * LIST_METHOD_INSERTAFTER(NODE_TYPE * node, VALUE_TYPE value);

/*
 * Returns the first node in the list. If the list is empty, returns NULL.
 */
NODE_TYPE * LIST_METHOD_FIRST(const LIST_TYPE * list);

/*
 * Returns the last node in the list. If the list is empty, returns NULL.
 */
NODE_TYPE * LIST_METHOD_LAST(const LIST_TYPE * list);

/*
 * Returns the next node in the list after `node`. If `node` is the last node
 * in the list, returns NULL.
 */
NODE_TYPE * LIST_METHOD_NEXT(const NODE_TYPE * node);

/*
 * Returns the previous node in the list after `node`. If `node` is the first
 * node in the list, returns NULL.
 */
NODE_TYPE * LIST_METHOD_PREV(const NODE_TYPE * node);

#endif

EOF
    ;;
  source)
read -r -d '' OUTPUT << "EOF"

#include "H_FILE"

#include <stddef.h>
#include <stdlib.h>

void LIST_METHOD_INIT(LIST_TYPE * l) {
  l->next = l;
  l->prev = l;
  l->head = l;
}

void LIST_METHOD_CLEAR(LIST_TYPE * l) {
  LIST_TYPE * l_iter;
  LIST_TYPE * l_iter_next;
  NODE_TYPE * node;

  l_iter = l->next;

  while(l_iter != l) {
    l_iter_next = l_iter->next;

    /* no offsetof *should* be necessary */
    node = (NODE_TYPE *)l_iter;

    free(node);

    l_iter = l_iter_next;
  }

  LIST_METHOD_INIT(l);
}

void LIST_METHOD_ERASE(NODE_TYPE * node) {
  node->list.prev->next = node->list.next;
  node->list.next->prev = node->list.prev;

  node->list.next = &node->list;
  node->list.prev = &node->list;
  node->list.head = &node->list;

  free(node);
}

NODE_TYPE * LIST_METHOD_PUSHBACK(LIST_TYPE * l, VALUE_TYPE value) {
  NODE_TYPE * newnode = calloc(sizeof(NODE_TYPE), 1);

  if(newnode) {
    newnode->list.next       = l;
    newnode->list.prev       = l->prev;
    l->prev                  = &newnode->list;
    newnode->list.prev->next = &newnode->list;
    newnode->list.head       = l->head;
    newnode->value = value;
  }

  return newnode;
}

NODE_TYPE * LIST_METHOD_PUSHFRONT(LIST_TYPE * l, VALUE_TYPE value) {
  NODE_TYPE * newnode = calloc(sizeof(NODE_TYPE), 1);

  if(newnode) {
    newnode->list.prev       = l;
    newnode->list.next       = l->next;
    l->next                  = &newnode->list;
    newnode->list.next->prev = &newnode->list;
    newnode->list.head       = l->head;
    newnode->value = value;
  }

  return newnode;
}

NODE_TYPE * LIST_METHOD_INSERTBEFORE(NODE_TYPE * node, VALUE_TYPE value) {
  NODE_TYPE * newnode = calloc(sizeof(NODE_TYPE), 1);

  if(newnode) {
    newnode->list.next       = &node->list;
    newnode->list.prev       = node->list.prev;
       node->list.prev       = &newnode->list;
    newnode->list.prev->next = &newnode->list;
    newnode->list.head       = node->list.head;
    newnode->value           = value;
  }

  return newnode;
}

NODE_TYPE * LIST_METHOD_INSERTAFTER(NODE_TYPE * node, VALUE_TYPE value) {
  NODE_TYPE * newnode = calloc(sizeof(NODE_TYPE), 1);

  if(newnode) {
    newnode->list.prev       = &node->list;
    newnode->list.next       = node->list.next;
       node->list.next       = &newnode->list;
    newnode->list.next->prev = &newnode->list;
    newnode->list.head       = node->list.head;
    newnode->value           = value;
  }

  return newnode;
}

NODE_TYPE * LIST_METHOD_FIRST(const LIST_TYPE * l) {
  if(l->next == l) { return 0; }
  return (NODE_TYPE *)l->next;
}

NODE_TYPE * LIST_METHOD_LAST(const LIST_TYPE * l) {
  if(l->prev == l) { return 0; }
  return (NODE_TYPE *)l->prev;
}

NODE_TYPE * LIST_METHOD_NEXT(const NODE_TYPE * l) {
  if(l->list.next == l->list.head) { return 0; }
  return (NODE_TYPE *)l->list.next;
}

NODE_TYPE * LIST_METHOD_PREV(const NODE_TYPE * l) {
  if(l->list.prev == l->list.head) { return 0; }
  return (NODE_TYPE *)l->list.prev;
}


EOF
    ;;
  *)
    fail 'bad output type'
    ;;
esac

# Replace non alphanumeric characters with _
INCLUDE_GUARD="_${H_FILE//[^a-zA-Z0-9]/_}_"
INCLUDE_GUARD="${INCLUDE_GUARD^^}"

REPLACE="\
s/INCLUDE_GUARD/${INCLUDE_GUARD}/g;\
s/VALUE_TYPE/${VALUE_TYPE}/g;\
s/LIST_STRUCT/${NAME}/g;\
s/LIST_TYPE/${NAME}_t/g;\
s/NODE_STRUCT/${NAME}_node/g;\
s/NODE_TYPE/${NAME}_node_t/g;\
s/LIST_METHOD_INIT/${NAME}_init/g;\
s/LIST_METHOD_CLEAR/${NAME}_clear/g;\
s/LIST_METHOD_ERASE/${NAME}_erase/g;\
s/LIST_METHOD_PUSHBACK/${NAME}_pushback/g;\
s/LIST_METHOD_PUSHFRONT/${NAME}_pushfront/g;\
s/LIST_METHOD_INSERTBEFORE/${NAME}_insertbefore/g;\
s/LIST_METHOD_INSERTAFTER/${NAME}_insertafter/g;\
s/LIST_METHOD_FIRST/${NAME}_first/g;\
s/LIST_METHOD_LAST/${NAME}_last/g;\
s/LIST_METHOD_NEXT/${NAME}_next/g;\
s/LIST_METHOD_PREV/${NAME}_prev/g;\
s/H_FILE/${H_FILE////\\/}/g;\
s/C_FILE/${C_FILE////\\/}/g"

# Perform substitutions and print
echo "$OUTPUT" | sed "$REPLACE"

