#!/usr/bin/bash

set -u

NAME=stack
VALUE_TYPE=int
H_FILE=
C_FILE=
OUTPUT_TYPE='overview'

function print() {
  echo "$1" >&2
}

function print_usage() {
  print "Usage: mkct.stack [OPTIONS]...                                       "
  print "Generate a dynamically-sized stack implementation with the given type"
  print "                                                                     "
  print "  --name=[NAME]            Set stack name/prefix                     "
  print "  --value-type=[TYPE]      Set type of values contained in the stack "
  print "                                                                     "
  print "  --header-file=[FILENAME] Set header file to [FILENAME]             "
  print "                             Defaults to [NAME].h                    "
  print "  --source-file=[FILENAME] Set source file to [FILENAME]             "
  print "                             Defaults to [NAME].c                    "
  print "                                                                     "
  print "  --overview               Output API/Overview   (default)           "
  print "  --header                 Output C header file                      "
  print "  --source                 Output C source file                      "
  print "                                                                     "
  print "  -h,--help                Show this usage and exit                  "
  print "                                                                     "
}

function fail() {
  print "error: $1"
  print ""
  exit 1
}

function fail_badusage() {
  print "error: $1"
  print ""
  print_usage
  exit 1
}

while [ "$#" -gt 0 ]; do
  case "$1" in
    --name=*)       NAME="${1#*=}";       shift 1 ;;
    --value-type=*) VALUE_TYPE="${1#*=}"; shift 1 ;;

    --header-file=*) H_FILE="${1#*=}"; shift 1 ;;
    --source-file=*) C_FILE="${1#*=}"; shift 1 ;;

    --name|--value-type|--header-file|--source-file)
      fail_badusage "$1 requires an argument" ;;

    --overview) OUTPUT_TYPE='overview'; shift 1 ;;
    --header)   OUTPUT_TYPE='header';   shift 1 ;;
    --source)   OUTPUT_TYPE='source';   shift 1 ;;

    -h|--help) print_usage; exit 0 ;;

    -*) fail_badusage "unknown option: $1" ;;
    *)  fail_badusage "unknown option: $1" ;;
  esac
done

if [ -z $H_FILE ]; then H_FILE="$NAME.h"; fi
if [ -z $C_FILE ]; then C_FILE="$NAME.c"; fi

case "$OUTPUT_TYPE" in
  overview)
read -r -d '' OUTPUT << "EOF"

EOF
    ;;
  header)
read -r -d '' OUTPUT << "EOF"
#ifndef INCLUDE_GUARD
#define INCLUDE_GUARD

typedef unsigned long SIZE_TYPE;

/*
 * FILO stack of `VALUE_TYPE`s. Values are copied, not referenced.
 */
typedef struct STACK_STRUCT {
  VALUE_TYPE * buffer_begin;
  VALUE_TYPE * buffer_end;
  VALUE_TYPE * putptr;
  SIZE_TYPE size;
} STACK_TYPE;

/*
 * Initializes the given `STACK_TYPE` to a valid, empty state.
 *
 * Warning: No memory will be freed. Use OBJMAP_METHOD_CLEAR to pop all values
 * from the stack.
 */
void STACK_METHOD_INIT(STACK_TYPE * stack);

/*
 * Pops all values present in the stack, and frees all allocated memory it
 * owns.
 */
void STACK_METHOD_CLEAR(STACK_TYPE * stack);

/*
 * Pushes the given value onto the top of the stack, reallocating buffer space
 * if necessary. Returns 1 if successful, and 0 otherwise.
 */
int STACK_METHOD_PUSH(STACK_TYPE * stack, VALUE_TYPE value);

/*
 * If the stack is non-empty, pops (erases) its top value and returns 1.
 * Otherwise, returns 0.
 */
int STACK_METHOD_POP(STACK_TYPE * stack);

/*
 * If the stack is non-empty, stores its top value into `*value_out` and returns 1.
 * Otherwise, leaves `*value_out` unmodified and returns 0.
 */
int STACK_METHOD_TOP(STACK_TYPE * stack, VALUE_TYPE * value_out);

/*
 * If a value exists at the given stack index, stores its value in `*value_out` and returns 1
 * Otherwise, leaves `*value_out` unmodified and returns 0.
 *
 * Note:
 *   An index of 0 is the front of the stack. The top of the stack is indexed
 *   by the stack's size minus one.
 */
int STACK_METHOD_AT(STACK_TYPE * stack, VALUE_TYPE * value_out, SIZE_TYPE idx);

/*
 * Returns the number of elements in the stack
 */
#define STACK_METHOD_SIZE(_stack_) (((const STACK_TYPE *)_stack_)->size)

#endif

EOF
    ;;
  source)
read -r -d '' OUTPUT << "EOF"

#include "H_FILE"

#include <stdlib.h>
#include <string.h>
#include <assert.h>


static const unsigned long initial_size = 32;


void STACK_METHOD_INIT(STACK_TYPE * stack) {
  stack->buffer_begin = NULL;
  stack->buffer_end   = NULL;
  stack->putptr = NULL;
  stack->size = 0;
}

void STACK_METHOD_CLEAR(STACK_TYPE * stack) {
  /* free the buffer (may be NULL) */
  free(stack->buffer_begin);

  /* clean slate */
  STACK_METHOD_INIT(stack);
}

int STACK_METHOD_PUSH(STACK_TYPE * stack, VALUE_TYPE value) {
  VALUE_TYPE * new_buffer_begin;
  SIZE_TYPE new_buffer_size;

  if(!stack->buffer_begin) {
    /* this buffer has not been allocated */
    stack->buffer_begin = malloc(initial_size*sizeof(VALUE_TYPE));

    /* couldn't alloc, escape before anything breaks */
    if(!stack->buffer_begin) { return 0; }

    stack->buffer_end = stack->buffer_begin + initial_size;
    stack->putptr     = stack->buffer_begin;
  } else if(stack->putptr == stack->buffer_end) {
    /* full buffer condition */

    /* double previous buffer size */
    new_buffer_size = 2*stack->size;

    /* realloc twice as large */
    new_buffer_begin = realloc(stack->buffer_begin, new_buffer_size*sizeof(VALUE_TYPE));

    /* couldn't realloc, escape before anything breaks */
    if(!new_buffer_begin) { return 0; }

    stack->buffer_begin = new_buffer_begin;
    stack->buffer_end   = new_buffer_begin + new_buffer_size;
    stack->putptr       = new_buffer_begin + stack->size;
  }

  /* store at put pointer and advance */
  *stack->putptr++ = value;

  /* keep track of size */
  stack->size ++;

  return 1;
}

int STACK_METHOD_POP(STACK_TYPE * stack) {
  /* If unallocated, but initialized, this won't try to pop, assuming
   * (stack->putptr == stack->buffer_end)
   */

  if(stack->putptr > stack->buffer_begin) {
    stack->putptr --;
    stack->size --;

    return 1;
  } else {
    return 0;
  }
}

int STACK_METHOD_TOP(STACK_TYPE * stack, VALUE_TYPE * value_out) {
  /* If unallocated, but initialized, this will return 0, assuming
   * (stack->putptr == stack->buffer_begin)
   *
   * Will not return undefined memory assuming
   * (stack->putptr <= stack->buffer_end)
   */

  if(stack->putptr > stack->buffer_begin) {
    *value_out = *(stack->putptr - 1);
    return 1;
  } else {
    return 0;
  }
}

int STACK_METHOD_AT(STACK_TYPE * stack, VALUE_TYPE * value_out, SIZE_TYPE idx) {
  /* If unallocated, but initialized, this will return 0, assuming
   * (stack->putptr == 0)
   */

  VALUE_TYPE * slot = stack->buffer_begin + idx;

  if(slot < stack->buffer_begin || slot >= stack->putptr) {
    return 0;
  } else {
    *value_out = *slot;
    return 1;
  }
}


EOF
    ;;
  *)
    fail 'bad output type'
    ;;
esac

# Replace non alphanumeric characters with _
INCLUDE_GUARD="_${H_FILE//[^a-zA-Z0-9]/_}_"
INCLUDE_GUARD="${INCLUDE_GUARD^^}"

REPLACE="\
s/INCLUDE_GUARD/${INCLUDE_GUARD}/g;\
s/VALUE_TYPE/${VALUE_TYPE}/g;\
s/STACK_STRUCT/${NAME}/g;\
s/STACK_TYPE/${NAME}_t/g;\
s/SIZE_TYPE/${NAME}_size_t/g;\
s/STACK_METHOD_INIT/${NAME}_init/g;\
s/STACK_METHOD_CLEAR/${NAME}_clear/g;\
s/STACK_METHOD_PUSH/${NAME}_push/g;\
s/STACK_METHOD_POP/${NAME}_pop/g;\
s/STACK_METHOD_TOP/${NAME}_top/g;\
s/STACK_METHOD_AT/${NAME}_at/g;\
s/STACK_METHOD_SIZE/${NAME}_size/g;\
s/H_FILE/${H_FILE////\\/}/g;\
s/C_FILE/${C_FILE////\\/}/g"

# Perform substitutions and print
echo "$OUTPUT" | sed "$REPLACE"

