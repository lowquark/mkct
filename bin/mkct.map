#!/usr/bin/bash

set -u

NAME=map
KEY_TYPE=int
VALUE_TYPE=int
H_FILE=
C_FILE=
OUTPUT_TYPE='overview'

function print() {
  echo "$1" >&2
}

function print_usage() {
  print "Usage: mkct.map [OPTIONS]...                                         "
  print "Generate a key/value map implementation with the given types         "
  print "                                                                     "
  print "  --name=[NAME]            Set list name/prefix                      "
  print "  --key-type=[TYPE]        Set type of keys indexed by the map       "
  print "  --value-type=[TYPE]      Set type of values contained in the map   "
  print "                                                                     "
  print "  --header-file=[FILENAME] Set header file to [FILENAME]             "
  print "                             Defaults to [NAME].h                    "
  print "  --source-file=[FILENAME] Set source file to [FILENAME]             "
  print "                             Defaults to [NAME].c                    "
  print "                                                                     "
  print "  --overview               Output API/Overview   (default)           "
  print "  --header                 Generate C header file                    "
  print "  --source                 Generate C source file                    "
  print "                                                                     "
  print "  -h,--help                Show this usage and exit                  "
  print "                                                                     "
}

function fail() {
  print "error: $1"
  print ""
  exit 1
}

function fail_badusage() {
  print "error: $1"
  print ""
  print_usage
  exit 1
}

while [ "$#" -gt 0 ]; do
  case "$1" in
    --name=*)       NAME="${1#*=}";       shift 1 ;;
    --key-type=*)   KEY_TYPE="${1#*=}";   shift 1 ;;
    --value-type=*) VALUE_TYPE="${1#*=}"; shift 1 ;;

    --header-file=*) H_FILE="${1#*=}"; shift 1 ;;
    --source-file=*) C_FILE="${1#*=}"; shift 1 ;;

    --name|--key-type|--value-type|--header-file|--source-file)
      fail_badusage "$1 requires an argument" ;;

    --overview) OUTPUT_TYPE='overview'; shift 1 ;;
    --header)   OUTPUT_TYPE='header';   shift 1 ;;
    --source)   OUTPUT_TYPE='source';   shift 1 ;;

    -h|--help) print_usage; exit 0 ;;

    -*) fail_badusage "unknown option: $1" ;;
    *)  fail_badusage "unknown option: $1" ;;
  esac
done

if [ -z $H_FILE ]; then H_FILE="$NAME.h"; fi
if [ -z $C_FILE ]; then C_FILE="$NAME.c"; fi

case "$OUTPUT_TYPE" in
  overview)
read -r -d '' OUTPUT << "EOF"

Files:
  H_FILE
  C_FILE

Description:
  Implements a lineraly-probed hash map from `KEY_TYPE` to `VALUE_TYPE`.

  Values are passed by copy - no value initialization or allocation is
  performed. Existing values are overwritten by new ones.

  A stub for hashing keys can be found in the generated source. More detailed
  documentation can be found in the generated header.

Types:
  Map object                 : MAP_TYPE
  Map entry type (unexposed) : ENTRY_TYPE
  Key type                   : KEY_TYPE
  Value type                 : VALUE_TYPE

API:
  Initialize a map object : MAP_METHOD_INIT  (MAP_TYPE * map)
  Erase all entries       : MAP_METHOD_CLEAR (MAP_TYPE * map)
  Retrieve an entry       : MAP_METHOD_GET   (MAP_TYPE * map, KEY_TYPE key, VALUE_TYPE * value_out) -> int (success/failure)
  Set an entry            : MAP_METHOD_SET   (MAP_TYPE * map, KEY_TYPE key, VALUE_TYPE value) -> int (success/failure)
  Check for an entry      : MAP_METHOD_HAS   (MAP_TYPE * map, KEY_TYPE key) -> int (success/failure)
  Erase an entry          : MAP_METHOD_ERASE (MAP_TYPE * map, KEY_TYPE key) -> int (success/failure)


EOF
    ;;
  header)
read -r -d '' OUTPUT << "EOF"
#ifndef INCLUDE_GUARD
#define INCLUDE_GUARD

struct ENTRY_STRUCT;

/*
 * Hash map from `KEY_TYPE` to `VALUE_TYPE` via linear-probing.
 */
typedef struct MAP_STRUCT {
  struct ENTRY_STRUCT * table;
  unsigned long table_size;
  unsigned long fill_count;
} MAP_TYPE;


/* Initializes the given `MAP_TYPE` to a valid, empty state.
 *
 * Warning: No memory will be freed. Use MAP_METHOD_CLEAR to erase all values in the map.
 */
void MAP_METHOD_INIT  (MAP_TYPE * map);

/*
 * Erases all values in the map, and frees all allocated memory it owns.
 */
void MAP_METHOD_CLEAR (MAP_TYPE * map);


/*
 * If a value exists with the given key, stores its value in `*value_out` and returns 1.
 * Otherwise, leaves `*value_out` unmodified and returns 0.
 */
int  MAP_METHOD_GET   (MAP_TYPE * map, KEY_TYPE key, VALUE_TYPE * value_out);

/*
 * Assigns the value with the given key to the given value.
 */
int  MAP_METHOD_SET   (MAP_TYPE * map, KEY_TYPE key, VALUE_TYPE value);

/*
 * Returns 1 if a value exists in the map with the given key, and 0 otherwise.
 */
int  MAP_METHOD_HAS   (MAP_TYPE * map, KEY_TYPE key);

/* Finds and erases the value with the given key.
 *
 * Returns 1 if the value was found (and erased) and 0 otherwise.
 */
int  MAP_METHOD_ERASE (MAP_TYPE * map, KEY_TYPE key);

#endif

EOF
    ;;
  source)
read -r -d '' OUTPUT << "EOF"

#include "H_FILE"

#include <stdlib.h>
#include <string.h>
#include <assert.h>


/*  ========  key functionality  ========  */


/* TODO: Implement hash for KEY_TYPE. */
static unsigned long hash_key(KEY_TYPE key) {
  return (*(unsigned long*)&key);
}

/* Called to compare keys. Must return 1 if keys match, and 0 if they don't. */
#define compare_key(key0, key1) ((key0) == (key1))
/* Alternatively: */
/*
static int compare_key(KEY_TYPE key0, KEY_TYPE key1) {
  return memcmp(&key0, &key1, sizeof(KEY_TYPE)) == 0;
}
*/


/*  ========  general functionality  ========  */


typedef enum entry_flag {
  ENTRY_FLAG_NULL = 0,
  ENTRY_FLAG_SET,
  ENTRY_FLAG_UNSET,
} entry_flag_t;

typedef struct ENTRY_STRUCT {
  entry_flag_t flag;
  KEY_TYPE     key;
  VALUE_TYPE   value;
} ENTRY_TYPE;


static const unsigned long initial_size = 32;

/* search for an entry in the table */
static ENTRY_TYPE * find(MAP_TYPE * map, KEY_TYPE key) {
  unsigned long idx;
  unsigned long first_idx;

  idx = hash_key(key) % map->table_size;
  first_idx = idx;

  /* iterate over set and unset entries in this linearly-probed chain */
  while(map->table[idx].flag != ENTRY_FLAG_NULL) {
    /* compare key if set */
    if(map->table[idx].flag == ENTRY_FLAG_SET && compare_key(map->table[idx].key, key)) {
      /* this is the one */
      return map->table + idx;
    }

    idx ++;
    /* wrap */
    if(idx >= map->table_size) { idx -= map->table_size; }
    /* searched whole table, give up */
    if(idx == first_idx) { return NULL; }
  }

  /* reached end of chain, give up */
  return NULL;
}

/* search for an unset entry, or a set entry with a matching key in the table */
static ENTRY_TYPE * find_insert(MAP_TYPE * map, KEY_TYPE key) {
  unsigned long idx;
  unsigned long first_idx;

  idx = hash_key(key) % map->table_size;
  first_idx = idx;

  /* skip set entries whose keys do not match */
  while(map->table[idx].flag == ENTRY_FLAG_SET && !compare_key(map->table[idx].key, key)) {
    idx ++;
    /* wrap */
    if(idx >= map->table_size) { idx -= map->table_size; }
    /* searched whole table, give up */
    if(idx == first_idx) { return NULL; }
  }

  /* this marks the first null; unset; or set entry whose key matches */
  return map->table + idx;
}

static int resize_table(MAP_TYPE * map, unsigned long newsize) {
  unsigned long idx;
  unsigned long new_fill_count = 0;

  unsigned long i;
  unsigned long table_size = map->table_size;
  ENTRY_TYPE * table = map->table;
  ENTRY_TYPE * newtable = calloc(sizeof(*newtable), newsize);
  ENTRY_TYPE * entry;

  assert(newsize >= table_size);

  if(!newtable) {
    return 0;
  }

  for(i = 0 ; i < table_size ; i ++) {
    entry = table + i;
    /* look for set entries */
    if(entry->flag == ENTRY_FLAG_SET) {
      /* copy to new table at hashed location */

      /* new hash location */
      idx = hash_key(entry->key) % newsize;

      /* skip set entries, also key matches are not possible */
      while(newtable[idx].flag == ENTRY_FLAG_SET) {
        idx ++;
        /* wrap */
        if(idx >= newsize) { idx -= newsize; }
        /* infinite loop not possible, given newsize >= table_size */
      }

      /* newtable[idx] is the first null */
      newtable[idx].flag  = ENTRY_FLAG_SET;
      newtable[idx].key   = entry->key;
      newtable[idx].value = entry->value;

      /* update new fill count */
      new_fill_count ++;
    }
  }

  /* free old table and replace */
  free(table);
  map->table = newtable;
  map->table_size = newsize;
  map->fill_count = new_fill_count;

  return 1;
}

void MAP_METHOD_INIT(MAP_TYPE * map) {
  assert(map);

  map->table      = NULL;
  map->table_size = 0;
  map->fill_count = 0;
}

void MAP_METHOD_CLEAR(MAP_TYPE * map) {
  assert(map);

  /* free buffer */
  free(map->table);

  /* cleared! */
  map->table = NULL;
  map->table_size = 0;
}

int MAP_METHOD_GET(MAP_TYPE * map, KEY_TYPE key, VALUE_TYPE * value_out) {
  ENTRY_TYPE * entry;

  assert(map);

  if(map->table == NULL) { return 0; }

  entry = find(map, key);

  if(entry) {
    *value_out = entry->value;
  }

  return entry != NULL;
}

int MAP_METHOD_SET(MAP_TYPE * map, KEY_TYPE key, VALUE_TYPE value) {
  ENTRY_TYPE * entry;

  assert(map);

  if(map->table == NULL) { 
    /* allocate since not allocated already */
    map->table = calloc(sizeof(ENTRY_TYPE), initial_size);

    /* couldn't alloc, escape before anything breaks */
    if(!map->table) { return 0; }

    map->table_size = initial_size;
  } else if(map->fill_count * 2 > map->table_size) {
    if(!resize_table(map, map->table_size * 2)) {
      /* couldn't resize, escape before anything breaks */
      return 0;
    }
  }

  entry = find_insert(map, key);

  if(entry) {
    if(entry->flag == ENTRY_FLAG_NULL) {
      /* previously null, increment fill count */
      map->fill_count ++;
    }

    entry->flag  = ENTRY_FLAG_SET;
    entry->key   = key;
    entry->value = value;
  }

  return entry != NULL;
}


int MAP_METHOD_HAS(MAP_TYPE * map, KEY_TYPE key) {
  assert(map);

  if(map->table == NULL) { return 0; }

  return find(map, key) != NULL;
}

int MAP_METHOD_ERASE(MAP_TYPE * map, KEY_TYPE key) {
  ENTRY_TYPE * entry;

  assert(map);

  if(map->table == NULL) { return 0; }

  entry = find(map, key);

  if(entry) {
    entry->flag = ENTRY_FLAG_UNSET;
  }

  return entry != NULL;
}


EOF
    ;;
  *)
    fail 'bad output type'
    ;;
esac

# Replace non alphanumeric characters with _
INCLUDE_GUARD="_${H_FILE//[^a-zA-Z0-9]/_}_"
INCLUDE_GUARD="${INCLUDE_GUARD^^}"

REPLACE="\
s/INCLUDE_GUARD/${INCLUDE_GUARD}/g;\
s/KEY_TYPE/${KEY_TYPE}/g;\
s/VALUE_TYPE/${VALUE_TYPE}/g;\
s/MAP_STRUCT/${NAME}/g;\
s/MAP_TYPE/${NAME}_t/g;\
s/ENTRY_STRUCT/${NAME}_entry/g;\
s/ENTRY_TYPE/${NAME}_entry_t/g;\
s/SIZE_TYPE/${NAME}_size_t/g;\
s/MAP_METHOD_INIT/${NAME}_init/g;\
s/MAP_METHOD_CLEAR/${NAME}_clear/g;\
s/MAP_METHOD_GET/${NAME}_get/g;\
s/MAP_METHOD_SET/${NAME}_set/g;\
s/MAP_METHOD_ERASE/${NAME}_erase/g;\
s/MAP_METHOD_HAS/${NAME}_has/g;\
s/MAP_METHOD_SIZE/${NAME}_size/g;\
s/H_FILE/${H_FILE////\\/}/g;\
s/C_FILE/${C_FILE////\\/}/g"

# Perform substitutions and print
echo "$OUTPUT" | sed "$REPLACE"

