#!/usr/bin/bash

set -u

NAME=objmap
KEY_TYPE=int
OBJECT_TYPE=int
H_FILE=
C_FILE=
OUTPUT_TYPE='overview'

function print() {
  echo "$1" >&2
}

function print_usage() {
  print "Usage: mkct.objmap [OPTIONS]...                                      "
  print "Generate a key/object map implementation with the given types        "
  print "                                                                     "
  print "  --name=[NAME]            Set list name/prefix                      "
  print "  --key-type=[TYPE]        Set type of keys indexed by the map       "
  print "  --object-type=[TYPE]     Set type of objects contained in the map  "
  print "                                                                     "
  print "  --header-file=[FILENAME] Set header file to [FILENAME]             "
  print "                             Defaults to [NAME].h                    "
  print "  --source-file=[FILENAME] Set source file to [FILENAME]             "
  print "                             Defaults to [NAME].c                    "
  print "                                                                     "
  print "  --overview               Output API/Overview   (default)           "
  print "  --header                 Generate C header file                    "
  print "  --source                 Generate C source file                    "
  print "                                                                     "
  print "  -h,--help                Show this usage and exit                  "
  print "                                                                     "
}

function fail() {
  print "error: $1"
  print ""
  exit 1
}

function fail_badusage() {
  print "error: $1"
  print ""
  print_usage
  exit 1
}

while [ "$#" -gt 0 ]; do
  case "$1" in
    --name=*)       NAME="${1#*=}";       shift 1 ;;
    --key-type=*)   KEY_TYPE="${1#*=}";   shift 1 ;;
    --object-type=*) OBJECT_TYPE="${1#*=}"; shift 1 ;;

    --header-file=*) H_FILE="${1#*=}"; shift 1 ;;
    --source-file=*) C_FILE="${1#*=}"; shift 1 ;;

    --name|--key-type|--object-type|--header-file|--source-file)
      fail_badusage "$1 requires an argument" ;;

    --overview) OUTPUT_TYPE='overview'; shift 1 ;;
    --header)   OUTPUT_TYPE='header';   shift 1 ;;
    --source)   OUTPUT_TYPE='source';   shift 1 ;;

    -h|--help) print_usage; exit 0 ;;

    -*) fail_badusage "unknown option: $1" ;;
    *)  fail_badusage "unknown option: $1" ;;
  esac
done

if [ -z $H_FILE ]; then H_FILE="$NAME.h"; fi
if [ -z $C_FILE ]; then C_FILE="$NAME.c"; fi

case "$OUTPUT_TYPE" in
  overview)
read -r -d '' OUTPUT << "EOF"

Files:
  Header : H_FILE
  Source : C_FILE

Description:
  Implements a single-chained hash map from `KEY_TYPE` to `OBJECT_TYPE`.

  Objects are allocated and initialized when entries are created. Objects are
  cleared and freed when entries are destroyed. Pointers to objects will remain
  valid until their entries are destroyed. Existing objects are destroyed
  before being replaced by new ones.

  Stubs for initializing objects, clearing objects, and hashing keys can be
  found in the generated source. More detailed documentation can be found in
  the generated header.

Types:
  Map object                 : OBJMAP_TYPE
  Map entry type (unexposed) : ENTRY_TYPE
  Key type                   : KEY_TYPE
  Object type                : OBJECT_TYPE

API:
  Initialize a map object : OBJMAP_METHOD_INIT    (OBJMAP_TYPE * map)
  Destroy all entries     : OBJMAP_METHOD_CLEAR   (OBJMAP_TYPE * map)
  Find an entry           : OBJMAP_METHOD_FIND    (OBJMAP_TYPE * map, KEY_TYPE key) -> OBJECT_TYPE *
  Create an entry         : OBJMAP_METHOD_CREATE  (OBJMAP_TYPE * map, KEY_TYPE key) -> OBJECT_TYPE *
  Destroy an entry        : OBJMAP_METHOD_DESTROY (OBJMAP_TYPE * map, KEY_TYPE key) -> int (success/failure)


EOF
    ;;
  header)
read -r -d '' OUTPUT << "EOF"
#ifndef INCLUDE_GUARD
#define INCLUDE_GUARD

struct ENTRY_STRUCT;

/*
 * Hash map from `KEY_TYPE` keys to `OBJECT_TYPE` objects. Manages
 * initialization and allocation of the objects, and stores shallow copies of
 * their keys.
 */
typedef struct OBJMAP_STRUCT {
  struct ENTRY_STRUCT ** table;
  unsigned long table_size;
  unsigned long entry_count;
} OBJMAP_TYPE;

/* Initializes the given `OBJMAP_TYPE` to a valid, empty state.
 *
 * Warning: No memory will be freed. Use OBJMAP_METHOD_CLEAR to destroy all
 * objects in the map.
 */
void OBJMAP_METHOD_INIT(OBJMAP_TYPE * map);

/*
 * Destroys all objects in the map, and frees all allocated memory it owns.
 */
void OBJMAP_METHOD_CLEAR(OBJMAP_TYPE * map);

/* Looks up the object using a given key.
 *
 * Returns a pointer to the found object. Returns NULL if no object has key
 * `key`.
 */
OBJECT_TYPE * OBJMAP_METHOD_FIND(OBJMAP_TYPE * map, KEY_TYPE key);

/* Creates a new object for the given key.
 *
 * If an entry is already at `key`, the old entry is destroyed and the new one
 * is put in its place.
 *
 * Returns a pointer to the new entry.
 */
OBJECT_TYPE * OBJMAP_METHOD_CREATE(OBJMAP_TYPE * map, KEY_TYPE key);

/* Finds and destroys the object with the given key.
 *
 * Returns 1 if the object was found (and destroyed) and 0 otherwise.
 */
int OBJMAP_METHOD_DESTROY(OBJMAP_TYPE * map, KEY_TYPE key);

/*
 * Returns the number of elements in the map
 */
#define OBJMAP_METHOD_SIZE(_map_) (((const MAP_TYPE *)_map_)->entry_count)

#endif

EOF
    ;;
  source)
read -r -d '' OUTPUT << "EOF"

#include "H_FILE"

#include <stdlib.h>
#include <string.h>
#include <assert.h>


/*  ========  key functionality  ========  */


/* TODO: Implement hash for KEY_TYPE. */
static unsigned long hash_key(KEY_TYPE key) {
  return (*(unsigned long*)&key);
}

/* Called to compare keys. Must return 1 if keys match, and 0 if they don't. */
#define compare_key(key0, key1) ((key0) == (key1))
/* Alternatively: */
/*
static int compare_key(KEY_TYPE key0, KEY_TYPE key1) {
  return memcmp(&key0, &key1, sizeof(KEY_TYPE)) == 0;
}
*/


/*  ========  object functionality  ========  */


/* This function is called after an object's memory has been allocated. */
static void object_init(OBJECT_TYPE * obj) {
  memset(obj, 0, sizeof(OBJECT_TYPE));
}

/* This function is called before an object's memory is freed. */
static void object_clear(OBJECT_TYPE * obj) {
}


/*  ========  general functionality  ========  */


static const unsigned long initial_size = 32;

typedef struct ENTRY_STRUCT {
  struct ENTRY_STRUCT * next;
  KEY_TYPE   key;
  OBJECT_TYPE object;
} ENTRY_TYPE;

static unsigned long hash_idx(KEY_TYPE key, unsigned long table_size) {
  assert(table_size > 0);

  return hash_key(key) % table_size;
}

static ENTRY_TYPE ** bucket_of(OBJMAP_TYPE * map, KEY_TYPE key) {
  assert(map->table);

  return map->table + hash_idx(key, map->table_size);
}

static int resize_table(OBJMAP_TYPE * map, unsigned long newsize) {
  unsigned long i;
  unsigned long table_size = map->table_size;
  ENTRY_TYPE ** table = map->table;
  ENTRY_TYPE ** newtable = calloc(sizeof(*newtable), newsize);

  if(!newtable) {
    return 0;
  }

  for(i = 0 ; i < table_size ; i ++) {
    /* free chain */
    ENTRY_TYPE * entry = table[i];

    while(entry) {
      /* save next pointer */
      ENTRY_TYPE * next = entry->next;

      unsigned long idx = hash_idx(entry->key, newsize);

      /* lookup chain in the new table */
      ENTRY_TYPE ** slot = newtable + idx;

      /* advance slot in the new chain */
      while(*slot) {
        assert(!compare_key((*slot)->key, entry->key));
        slot = &(*slot)->next;
      }

      /* place at end of destination chain */
      *slot = entry;
      entry->next = NULL;

      /* repeate again with the next entry in the old chain */
      entry = next;
    }
  }

  free(table);
  map->table = newtable;
  map->table_size = newsize;

  return 1;
}

void OBJMAP_METHOD_INIT(OBJMAP_TYPE * m) {
  m->table       = NULL;
  m->table_size  = 0;
  m->entry_count = 0;
}

void OBJMAP_METHOD_CLEAR(OBJMAP_TYPE * map) {
  unsigned long i;
  unsigned long table_size = map->table_size;
  ENTRY_TYPE ** table = map->table;

  for(i = 0 ; i < table_size ; i ++) {
    /* free chain */
    ENTRY_TYPE * entry = table[i];

    while(entry) {
      /* cache next pointer */
      ENTRY_TYPE * next = entry->next;
      /* destroy this one */
      object_clear(&entry->object);
      free(entry);
      /* try again with the next */
      entry = next;
    }

    table[i] = NULL;
  }

  /* free buffer */
  free(map->table);

  /* cleared! */
  map->table = NULL;
  map->table_size = 0;
}

OBJECT_TYPE * OBJMAP_METHOD_FIND(OBJMAP_TYPE * map, KEY_TYPE key) {
  ENTRY_TYPE * list;

  if(map->table == NULL) { return NULL; }

  list = *bucket_of(map, key);

  while(list) {
    if(compare_key(list->key, key)) {
      return &list->object;
    }
    list = list->next;
  }

  return NULL;
}

OBJECT_TYPE * OBJMAP_METHOD_CREATE(OBJMAP_TYPE * map, KEY_TYPE key) {
  assert(map);

  if(map->table == NULL) { 
    /* allocate since not allocated already */
    map->table = calloc(sizeof(ENTRY_TYPE *), initial_size);

    /* couldn't alloc, escape before anything breaks */
    if(!map->table) { return NULL; }

    map->table_size = initial_size;
  } else if(map->entry_count > map->table_size*2) {
    if(!resize_table(map, map->table_size * 2)) {
      /* couldn't resize, escape before anything breaks */
      return NULL;
    }
  }

  ENTRY_TYPE ** slot = bucket_of(map, key);

  /* advance last slot */
  while(*slot) {
    ENTRY_TYPE * entry = *slot;

    if(compare_key(entry->key, key)) {
      /* already exists, only deinit object, not key */
      object_clear(&entry->object);
      object_init(&entry->object);
      /* good as new */
      return &entry->object;
    }

    slot = &(*slot)->next;
  }

  /* reached end of chain, create a new entry */
  ENTRY_TYPE * new_entry = malloc(sizeof(*new_entry));

  /* couldn't alloc, escape before anything breaks */
  if(!new_entry) { return NULL; }

  new_entry->next = NULL;
  new_entry->key = key;
  *slot = new_entry;

  /* initialize object */
  object_init(&new_entry->object);

  map->entry_count ++;

  return &new_entry->object;
}


int OBJMAP_METHOD_DESTROY(OBJMAP_TYPE * map, KEY_TYPE key) {
  if(map->table == NULL) { return 0; }

  ENTRY_TYPE ** slot = bucket_of(map, key);

  while(*slot) {
    ENTRY_TYPE * entry = *slot;

    if(compare_key(entry->key, key)) {
      /* matches, skip over */
      *slot = entry->next;

      /* free */
      object_clear(&entry->object);
      free(entry);

      /* one less entry total */
      map->entry_count --;

      return 1;
    }

    slot = &entry->next;
  }

  /* nothing was destroyed */
  return 0;
}


EOF
    ;;
  *)
    fail 'bad output type'
    ;;
esac

# Replace non alphanumeric characters with _
INCLUDE_GUARD="_${H_FILE//[^a-zA-Z0-9]/_}_"
INCLUDE_GUARD="${INCLUDE_GUARD^^}"

REPLACE="\
s/INCLUDE_GUARD/${INCLUDE_GUARD}/g;\
s/KEY_TYPE/${KEY_TYPE}/g;\
s/OBJECT_TYPE/${OBJECT_TYPE}/g;\
s/OBJMAP_STRUCT/${NAME}/g;\
s/OBJMAP_TYPE/${NAME}_t/g;\
s/ENTRY_STRUCT/${NAME}_entry/g;\
s/ENTRY_TYPE/${NAME}_entry_t/g;\
s/SIZE_TYPE/${NAME}_size_t/g;\
s/OBJMAP_METHOD_INIT/${NAME}_init/g;\
s/OBJMAP_METHOD_CLEAR/${NAME}_clear/g;\
s/OBJMAP_METHOD_CREATE/${NAME}_create/g;\
s/OBJMAP_METHOD_DESTROY/${NAME}_destroy/g;\
s/OBJMAP_METHOD_FIND/${NAME}_find/g;\
s/OBJMAP_METHOD_SIZE/${NAME}_size/g;\
s/H_FILE/${H_FILE////\\/}/g;\
s/C_FILE/${C_FILE////\\/}/g"

# Perform substitutions and print
echo "$OUTPUT" | sed "$REPLACE"

