#!/usr/bin/bash

set -u

NAME=queue
VALUE_TYPE=int
H_FILE=
C_FILE=
OUTPUT_TYPE='overview'

function print() {
  echo "$1" >&2
}

function print_usage() {
  print "Usage: mkct.queue [OPTIONS]...                                       "
  print "Generate a dynamically-sized queue implementation with the given type"
  print "                                                                     "
  print "  --name=[NAME]            Set queue name/prefix                     "
  print "  --value-type=[TYPE]      Set type of values contained in the queue "
  print "                                                                     "
  print "  --header-file=[FILENAME] Set header file to [FILENAME]             "
  print "                             Defaults to [NAME].h                    "
  print "  --source-file=[FILENAME] Set source file to [FILENAME]             "
  print "                             Defaults to [NAME].c                    "
  print "                                                                     "
  print "  --overview               Output API/Overview   (default)           "
  print "  --header                 Output C header file                      "
  print "  --source                 Output C source file                      "
  print "                                                                     "
  print "  -h,--help                Show this usage and exit                  "
  print "                                                                     "
}

function fail() {
  print "error: $1"
  print ""
  exit 1
}

function fail_badusage() {
  print "error: $1"
  print ""
  print_usage
  exit 1
}

while [ "$#" -gt 0 ]; do
  case "$1" in
    --name=*)       NAME="${1#*=}";       shift 1 ;;
    --value-type=*) VALUE_TYPE="${1#*=}"; shift 1 ;;

    --header-file=*) H_FILE="${1#*=}"; shift 1 ;;
    --source-file=*) C_FILE="${1#*=}"; shift 1 ;;

    --name|--value-type|--header-file|--source-file)
      fail_badusage "$1 requires an argument" ;;

    --overview) OUTPUT_TYPE='overview'; shift 1 ;;
    --header)   OUTPUT_TYPE='header';   shift 1 ;;
    --source)   OUTPUT_TYPE='source';   shift 1 ;;

    -h|--help) print_usage; exit 0 ;;

    -*) fail_badusage "unknown option: $1" ;;
    *)  fail_badusage "unknown option: $1" ;;
  esac
done

if [ -z $H_FILE ]; then H_FILE="$NAME.h"; fi
if [ -z $C_FILE ]; then C_FILE="$NAME.c"; fi

case "$OUTPUT_TYPE" in
  overview)
read -r -d '' OUTPUT << "EOF"

EOF
    ;;
  header)
read -r -d '' OUTPUT << "EOF"
#ifndef INCLUDE_GUARD
#define INCLUDE_GUARD

/*
 * FIFO queue of `VALUE_TYPE`s. Values are copied, not referenced.
 */
typedef struct QUEUE_STRUCT {
  VALUE_TYPE * buffer_begin;
  VALUE_TYPE * buffer_end;

  VALUE_TYPE * getptr;
  VALUE_TYPE * putptr;

  long size;
} QUEUE_TYPE;

/*
 * Initializes the given `QUEUE_TYPE` to a valid, empty state.
 *
 * Warning: No memory will be freed. Use OBJMAP_METHOD_CLEAR to pop all values
 * from the queue.
 */
void QUEUE_METHOD_INIT(QUEUE_TYPE * q);

/*
 * Pops all values present in the queue, and frees all allocated memory it
 * owns.
 */
void QUEUE_METHOD_CLEAR(QUEUE_TYPE * q);

/*
 * Pushes the given value onto the back of the queue, reallocating buffer space
 * if necessary. Returns 1 if successful, and 0 otherwise.
 */
int QUEUE_METHOD_PUSH(QUEUE_TYPE * q, VALUE_TYPE value);

/*
 * If the queue is non-empty, pops (erases) its front value and returns 1.
 * Otherwise, returns 0.
 */
int QUEUE_METHOD_POP(QUEUE_TYPE * q);

/*
 * If the queue is non-empty, stores its top value into `*value_out` and returns 1.
 * Otherwise, leaves `*value_out` unmodified and returns 0.
 */
int QUEUE_METHOD_PEEK(QUEUE_TYPE * q, VALUE_TYPE * value_out);

/*
 * If a value exists at the given queue index, stores its value in `*value_out` and returns 1
 * Otherwise, leaves `*value_out` unmodified and returns 0.
 *
 * Note:
 *   An index of 0 is the front of the queue. The back of the queue is indexed
 *   by the queue's size minus one.
 */
int QUEUE_METHOD_AT(QUEUE_TYPE * q, VALUE_TYPE * value_out, int idx);

/*
 * Returns the number of elements in the queue
 */
#define QUEUE_METHOD_SIZE(_queue_) (((const QUEUE_TYPE *)_queue_)->size)

#endif

EOF
    ;;
  source)
read -r -d '' OUTPUT << "EOF"

#include "H_FILE"

#include <stdlib.h>
#include <assert.h>
#include <string.h>

#define INITIAL_SIZE 32

void QUEUE_METHOD_INIT(QUEUE_TYPE * q) {
  q->buffer_begin = NULL;
  q->buffer_end = NULL;
  q->getptr = NULL;
  q->putptr = NULL;
  q->size = 0;
}

void QUEUE_METHOD_CLEAR(QUEUE_TYPE * q) {
  /* free the buffer (may be NULL) */
  free(q->buffer_begin);

  /* clean slate */
  QUEUE_METHOD_INIT(q);
}

int QUEUE_METHOD_PUSH(QUEUE_TYPE * q, VALUE_TYPE value) {
  VALUE_TYPE * new_buffer_begin;
  VALUE_TYPE * wrap_point;
  long new_buffer_size;

  if(!q->buffer_begin) {
    /* this buffer is null */
    q->buffer_begin = malloc(INITIAL_SIZE*sizeof(VALUE_TYPE));

    /* couldn't alloc, escape before anything breaks */
    if(!q->buffer_begin) { return 0; }

    q->buffer_end   = q->buffer_begin + INITIAL_SIZE;
    q->getptr       = q->buffer_begin;
    q->putptr       = q->buffer_begin;
  } else if(q->getptr == q->putptr && q->size != 0) {
    /* full buffer condition */

    /* sanity check */
    assert(q->buffer_end - q->buffer_begin == q->size);

    /* double previous buffer size */
    new_buffer_size = 2*q->size;

    /* alloc new buffer twice as large */
    new_buffer_begin = malloc(new_buffer_size*sizeof(VALUE_TYPE));

    /* couldn't alloc, escape before anything breaks */
    if(!new_buffer_begin) { return 0; }

    /* pointer within new_buffer where buffer_end lines up with */
    wrap_point = new_buffer_begin + (q->buffer_end - q->putptr);

    /* copy first part [putptr, buffer_end) to new_buffer_begin */
    memcpy(new_buffer_begin, q->putptr, sizeof(VALUE_TYPE)*(q->buffer_end - q->putptr));

    /* copy second part [buffer_begin, putptr) to wrap_point */
    memcpy(wrap_point, q->buffer_begin, sizeof(VALUE_TYPE)*(q->putptr - q->buffer_begin));

    /* new buffer has been initialized, replace old buffer */
    free(q->buffer_begin);

    q->buffer_begin = new_buffer_begin;
    q->buffer_end   = new_buffer_begin + new_buffer_size;
    q->getptr       = new_buffer_begin;
    q->putptr       = new_buffer_begin + q->size;
  }

  /* store at put pointer and advance */
  *q->putptr++ = value;

  /* wrap put pointer at end */
  if(q->putptr == q->buffer_end) {
    q->putptr = q->buffer_begin;
  }

  /* keep track of size */
  q->size ++;

  /* return success */
  return 1;
}

int QUEUE_METHOD_POP(QUEUE_TYPE * q) {
  if(q->size == 0) { return 0; }

  q->getptr++;

  /* wrap get pointer at end */
  if(q->getptr == q->buffer_end) {
    q->getptr = q->buffer_begin;
  }

  /* keep track of size */
  q->size --;

  return 1;
}

int QUEUE_METHOD_PEEK(QUEUE_TYPE * q, VALUE_TYPE * value_out) {
  if(q->size == 0) { return 0; }

  *value_out = *q->getptr;

  return 1;
}

int QUEUE_METHOD_AT(QUEUE_TYPE * q, VALUE_TYPE * value_out, int idx) {
  VALUE_TYPE * elem_ptr;

  if(idx < 0) { return 0; }

  if(idx >= q->size) { return 0; }

  elem_ptr = q->getptr + idx;

  if(elem_ptr >= q->buffer_end) {
    elem_ptr -= q->buffer_end - q->buffer_begin;
  }

  *value_out = *elem_ptr;

  return 1;
}


EOF
    ;;
  *)
    fail 'bad output type'
    ;;
esac

# Replace non alphanumeric characters with _
INCLUDE_GUARD="_${H_FILE//[^a-zA-Z0-9]/_}_"
INCLUDE_GUARD="${INCLUDE_GUARD^^}"

REPLACE="\
s/INCLUDE_GUARD/${INCLUDE_GUARD}/g;\
s/VALUE_TYPE/${VALUE_TYPE}/g;\
s/QUEUE_STRUCT/${NAME}/g;\
s/QUEUE_TYPE/${NAME}_t/g;\
s/SIZE_TYPE/${NAME}_size_t/g;\
s/QUEUE_METHOD_INIT/${NAME}_init/g;\
s/QUEUE_METHOD_CLEAR/${NAME}_clear/g;\
s/QUEUE_METHOD_PUSH/${NAME}_push/g;\
s/QUEUE_METHOD_POP/${NAME}_pop/g;\
s/QUEUE_METHOD_PEEK/${NAME}_peek/g;\
s/QUEUE_METHOD_AT/${NAME}_at/g;\
s/QUEUE_METHOD_SIZE/${NAME}_size/g;\
s/H_FILE/${H_FILE////\\/}/g;\
s/C_FILE/${C_FILE////\\/}/g"

# Perform substitutions and print
echo "$OUTPUT" | sed "$REPLACE"

