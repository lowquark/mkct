#!/usr/bin/bash

set -u

H_FILE=
C_FILE=

# TODO: Style, force overwrite, verbosity, output files, etc.
while [ "$#" -gt 0 ]; do
  case "$1" in
    -n) OBJMAP_NAME="$2"; shift 2;;
    -k) KEY_TYPEDEF="$2"; shift 2;;
    -v) VALUE_TYPEDEF="$2"; shift 2;;

    --name=*) OBJMAP_NAME="${1#*=}"; shift 1;;
    --key-type=*) KEY_TYPEDEF="${1#*=}"; shift 1;;
    --value-type=*) VALUE_TYPEDEF="${1#*=}"; shift 1;;
    --name|--key-type|--value-type) echo "$1 requires an argument" >&2; exit 1;;

    -*) echo "unknown option: $1" >&2; exit 1;;
    *) echo "unknown option: $1" >&2; exit 1;;
  esac
done

# Minimum set parameters
if [ -z "$OBJMAP_NAME" ]; then echo "no name specified! aborting." >&2; exit 1; fi
if [ -z "$KEY_TYPEDEF" ]; then echo "no key type specified! aborting." >&2; exit 1; fi
if [ -z "$VALUE_TYPEDEF" ]; then echo "no value type specified! aborting." >&2; exit 1; fi

# Derived parameters
INCLUDE_GUARD="${OBJMAP_NAME^^}_H"
OBJMAP_STRUCT="$OBJMAP_NAME"
OBJMAP_TYPEDEF="${OBJMAP_NAME}_t"
OBJMAP_METHOD_INIT="${OBJMAP_NAME}_init"
OBJMAP_METHOD_CLEAR="${OBJMAP_NAME}_clear"
OBJMAP_METHOD_FIND="${OBJMAP_NAME}_find"
OBJMAP_METHOD_CREATE="${OBJMAP_NAME}_create"
OBJMAP_METHOD_DESTROY="${OBJMAP_NAME}_destroy"
ENTRY_STRUCT="${OBJMAP_NAME}_entry"
ENTRY_TYPEDEF="${OBJMAP_NAME}_entry_t"

# Overridable derived parameters
if [ -z "$H_FILE" ]; then H_FILE="$OBJMAP_NAME.h"; fi
if [ -z "$C_FILE" ]; then C_FILE="$OBJMAP_NAME.c"; fi

# Print a summary
#echo "Header file    : ${H_FILE}" >&2
#echo "Source file    : ${C_FILE}" >&2
#echo "INCLUDE_GUARD  : $INCLUDE_GUARD" >&2
#echo "OBJMAP_STRUCT  : $OBJMAP_STRUCT" >&2
#echo "OBJMAP_TYPEDEF : $OBJMAP_TYPEDEF" >&2
#echo "ENTRY_STRUCT   : $ENTRY_STRUCT" >&2
#echo "ENTRY_TYPEDEF  : $ENTRY_TYPEDEF" >&2

# Don't overwrite
#if [ -f $H_FILE ]; then echo "\"$H_FILE\" already exists! aborting." >&2; exit 1; fi
#if [ -f $C_FILE ]; then echo "\"$C_FILE\" already exists! aborting." >&2; exit 1; fi

read -r -d '' UNLICENSE << "EOF"
/* 
 * This is free and unencumbered software released into the public domain.
 * 
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 * 
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 * 
 * For more information, please refer to <http://unlicense.org>
 */
EOF

# Why yes, this is an entire header file
read -r -d '' H_FILE_SRC << "EOF"
#ifndef INCLUDE_GUARD
#define INCLUDE_GUARD

struct ENTRY_STRUCT;

/*
 * Hash map from `KEY_TYPEDEF` keys to `VALUE_TYPEDEF` values. Manages
 * initialization and allocation of values, and stores shallow copies of their
 * keys.
 */
typedef struct OBJMAP_STRUCT {
  struct ENTRY_STRUCT ** table;
  unsigned long table_size;
  unsigned long entry_count;
} OBJMAP_TYPEDEF;

/* Initializes the given `OBJMAP_TYPEDEF` to a valid, empty state.
 *
 * Warning: No memory will be freed. Use OBJMAP_METHOD_CLEAR to erase all values in the map.
 */
void OBJMAP_METHOD_INIT(OBJMAP_TYPEDEF * map);

/* Destroys all values in the map, and destroys all allocated memory owned by the map. */
void OBJMAP_METHOD_CLEAR(OBJMAP_TYPEDEF * map);

/* Looks up the value using a given key.
 *
 * Returns a pointer to the found value. Returns NULL if no value has key `key`.
 */
VALUE_TYPEDEF * OBJMAP_METHOD_FIND(OBJMAP_TYPEDEF * map, KEY_TYPEDEF key);

/* Creates a new value for the given key.
 *
 * If an entry is already at `key`, the old entry is destroyed and the new one is put in its place.
 *
 * Returns a pointer to the new entry.
 */
VALUE_TYPEDEF * OBJMAP_METHOD_CREATE(OBJMAP_TYPEDEF * map, KEY_TYPEDEF key);

/* Finds and destroys the value with the given key.
 *
 * Returns 1 if the value was found (and destroyed) and 0 otherwise.
 */
int OBJMAP_METHOD_DESTROY(OBJMAP_TYPEDEF * map, KEY_TYPEDEF key);

#endif
EOF

# Why yes, this is an entire C file
read -r -d '' C_FILE_SRC << "EOF"

#include "H_FILE"

#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <assert.h>

typedef struct ENTRY_STRUCT {
  struct ENTRY_STRUCT * next;
  KEY_TYPEDEF   key;
  VALUE_TYPEDEF value;
} ENTRY_TYPEDEF;

/*** type specific functionaility ***/

/* TODO: Implement hash for KEY_TYPEDEF. */
static unsigned long hash_key(KEY_TYPEDEF key) {
  return (*(unsigned long*)&key);
}

/* Called to compare keys. Must return 1 if keys match, and 0 if they don't.
 *
 * Alternatively:
 * static int compare_key(KEY_TYPEDEF key0, KEY_TYPEDEF key1) {
 *   return memcmp(&key0, &key1, sizeof(KEY_TYPEDEF)) == 0;
 * }
 */

#define compare_key(key0, key1) ((key0) == (key1))

/* TODO: Cleanup the key, if applicable. This function is called
 * when entries are erased, but not when they are overwritten. */
static void deinit_key(KEY_TYPEDEF * key) {
}

/* TODO: Initialize a value, if applicable. This function is called
 * when entries created or overwritten. */
static void init_value(VALUE_TYPEDEF * value) {
  memset(value, 0, sizeof(VALUE_TYPEDEF));
}

/* TODO: Cleanup a value, if applicable. This function is called
 * when entries are erased or overwritten. */
static void deinit_value(VALUE_TYPEDEF * value) {
  memset(value, 0, sizeof(VALUE_TYPEDEF));
}

/*** general functionaility ***/

static const unsigned long initial_size = 32;

static unsigned long hash_idx(KEY_TYPEDEF key, unsigned long table_size) {
  assert(table_size > 0);

  return hash_key(key) % table_size;
}

static ENTRY_TYPEDEF ** bucket_of(OBJMAP_TYPEDEF * map, KEY_TYPEDEF key) {
  assert(map->table);

  return map->table + hash_idx(key, map->table_size);
}

static int resize_table(OBJMAP_TYPEDEF * map, unsigned long newsize) {
  unsigned long i;
  unsigned long table_size = map->table_size;
  ENTRY_TYPEDEF ** table = map->table;
  ENTRY_TYPEDEF ** newtable = calloc(sizeof(*newtable), newsize);

  if(!newtable) {
    return 0;
  }

  for(i = 0 ; i < table_size ; i ++) {
    /* free chain */
    ENTRY_TYPEDEF * entry = table[i];

    while(entry) {
      /* save next pointer */
      ENTRY_TYPEDEF * next = entry->next;

      unsigned long idx = hash_idx(entry->key, newsize);

      /* lookup chain in the new table */
      ENTRY_TYPEDEF ** slot = newtable + idx;

      /* advance slot in the new chain */
      while(*slot) {
        assert(!compare_key((*slot)->key, entry->key));
        slot = &(*slot)->next;
      }

      /* place at end of destination chain */
      *slot = entry;
      entry->next = NULL;

      /* repeate again with the next entry in the old chain */
      entry = next;
    }
  }

  free(table);
  map->table = newtable;
  map->table_size = newsize;

  return 1;
}

void OBJMAP_METHOD_INIT(OBJMAP_TYPEDEF * m) {
  m->table       = NULL;
  m->table_size  = 0;
  m->entry_count = 0;
}

void OBJMAP_METHOD_CLEAR(OBJMAP_TYPEDEF * map) {
  unsigned long i;
  unsigned long table_size = map->table_size;
  ENTRY_TYPEDEF ** table = map->table;

  for(i = 0 ; i < table_size ; i ++) {
    /* free chain */
    ENTRY_TYPEDEF * entry = table[i];

    while(entry) {
      /* cache next pointer */
      ENTRY_TYPEDEF * next = entry->next;
      /* destroy this one */
      deinit_key(&entry->key);
      deinit_value(&entry->value);
      free(entry);
      /* try again with the next */
      entry = next;
    }

    table[i] = NULL;
  }

  /* free buffer */
  free(map->table);

  /* cleared! */
  map->table = NULL;
  map->table_size = 0;
}

VALUE_TYPEDEF * OBJMAP_METHOD_FIND(OBJMAP_TYPEDEF * map, KEY_TYPEDEF key) {
  ENTRY_TYPEDEF * list;

  if(map->table == NULL) { return NULL; }

  list = *bucket_of(map, key);

  while(list) {
    if(compare_key(list->key, key)) {
      return &list->value;
    }
    list = list->next;
  }

  return NULL;
}

VALUE_TYPEDEF * OBJMAP_METHOD_CREATE(OBJMAP_TYPEDEF * map, KEY_TYPEDEF key) {
  assert(map);

  if(map->table == NULL) { 
    /* allocate since not allocated already */
    map->table = calloc(sizeof(ENTRY_TYPEDEF *), initial_size);

    /* couldn't alloc, escape before anything breaks */
    if(!map->table) { return NULL; }

    map->table_size = initial_size;
  } else if(map->entry_count > map->table_size*2) {
    if(!resize_table(map, map->table_size * 2)) {
      /* couldn't resize, escape before anything breaks */
      return NULL;
    }
  }

  ENTRY_TYPEDEF ** slot = bucket_of(map, key);

  /* advance last slot */
  while(*slot) {
    ENTRY_TYPEDEF * entry = *slot;

    if(compare_key(entry->key, key)) {
      /* already exists, only deinit value, not key */
      deinit_value(&entry->value);
      init_value(&entry->value);
      /* good as new */
      return &entry->value;
    }

    slot = &(*slot)->next;
  }

  /* reached end of chain, create a new entry */
  ENTRY_TYPEDEF * new_entry = malloc(sizeof(*new_entry));

  /* couldn't alloc, escape before anything breaks */
  if(!new_entry) { return NULL; }

  new_entry->next = NULL;
  new_entry->key = key;
  *slot = new_entry;

  /* initialize object */
  init_value(&new_entry->value);

  map->entry_count ++;

  return &new_entry->value;
}


int OBJMAP_METHOD_DESTROY(OBJMAP_TYPEDEF * map, KEY_TYPEDEF key) {
  if(map->table == NULL) { return 0; }

  ENTRY_TYPEDEF ** slot = bucket_of(map, key);

  while(*slot) {
    ENTRY_TYPEDEF * entry = *slot;

    if(compare_key(entry->key, key)) {
      /* matches, skip over */
      *slot = entry->next;

      /* free */
      deinit_key(&entry->key);
      deinit_value(&entry->value);
      free(entry);

      /* one less entry total */
      map->entry_count --;

      return 1;
    }

    slot = &entry->next;
  }

  /* nothing was destroyed */
  return 0;
}

EOF

REPLACE="\
s/INCLUDE_GUARD/$INCLUDE_GUARD/g;\
s/OBJMAP_STRUCT/$OBJMAP_STRUCT/g;\
s/OBJMAP_TYPEDEF/$OBJMAP_TYPEDEF/g;\
s/OBJMAP_METHOD_INIT/$OBJMAP_METHOD_INIT/g;\
s/OBJMAP_METHOD_CLEAR/$OBJMAP_METHOD_CLEAR/g;\
s/OBJMAP_METHOD_FIND/$OBJMAP_METHOD_FIND/g;\
s/OBJMAP_METHOD_CREATE/$OBJMAP_METHOD_CREATE/g;\
s/OBJMAP_METHOD_DESTROY/$OBJMAP_METHOD_DESTROY/g;\
s/ENTRY_STRUCT/$ENTRY_STRUCT/g;\
s/ENTRY_TYPEDEF/$ENTRY_TYPEDEF/g;\
s/KEY_TYPEDEF/$KEY_TYPEDEF/g;\
s/VALUE_TYPEDEF/$VALUE_TYPEDEF/g;\
s/H_FILE/$H_FILE/g;\
s/C_FILE/$C_FILE/g"

# Perform substitutions on header
H_FILE_SRC=$(echo "$H_FILE_SRC" | sed "$REPLACE")
#echo "writing \`$H_FILE\`" >&2
echo -e "$UNLICENSE\n\n$H_FILE_SRC" > $H_FILE

# Perform substitutions on source
C_FILE_SRC=$(echo "$C_FILE_SRC" | sed "$REPLACE")
#echo "writing \`$C_FILE\`" >&2
echo -e "$UNLICENSE\n\n$C_FILE_SRC" > $C_FILE

